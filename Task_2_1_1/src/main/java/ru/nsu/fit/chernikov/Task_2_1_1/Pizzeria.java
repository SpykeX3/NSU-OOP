/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.nsu.fit.chernikov.Task_2_1_1;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class Pizzeria {
  private BlockingQueue<Order> pendingOrders;
  private BlockingQueue<Order> warehouse;

  private ArrayList<Cook> cooks;

  private ArrayList<Courier> couriers;

  public Log log;

  private Date shiftEnd;

  private long delayLimit; // Milliseconds

  private long shiftLength; // Milliseconds

  private double income;

  Order takeCookingOrder() {
    Order take = null;
    try {
      take = pendingOrders.poll(timeUntilShiftEnd(), TimeUnit.MILLISECONDS);
    } catch (InterruptedException e) {
      log.logException(e);
    }
    return take;
  }

  boolean putInWarehouse(Order order) {
    boolean res = false;
    try {
      res = warehouse.offer(order, timeUntilShiftEnd(), TimeUnit.MILLISECONDS);
    } catch (InterruptedException e) {
      log.logException(e);
    }
    return res;
  }

  Order takeDeliveryOrder() {
    Order take = null;
    try {
      take = warehouse.take();
    } catch (InterruptedException e) {
      log.logException(e);
    }
    return take;
  }

  ArrayList<Order> fillTrunk(int capacity) {
    if (capacity <= 0) {
      throw new IllegalArgumentException("capacity must be positive");
    }
    ArrayList<Order> trunk = new ArrayList<>(capacity);
    try {
      Order nextOrder = warehouse.poll(timeUntilShiftEnd(), TimeUnit.MILLISECONDS);
      if (nextOrder != null) {
        trunk.add(nextOrder);
        capacity--;
      }
    } catch (InterruptedException e) {
      log.logException(e);
    }
    while (capacity > 0) {
      Order nextOrder = warehouse.poll();
      if (nextOrder == null) {
        break;
      }
      trunk.add(nextOrder);
      capacity--;
    }
    return trunk;
  }

  synchronized void checkout(double payment) {
    income += payment;
  }

  private void setShiftEnd(long delta) {
    Date now = new Date();
    long end = now.getTime() + delta * 1000;
    shiftEnd = new Date(end);
  }

  public Pizzeria(
      ArrayList<Cook> _cooks,
      ArrayList<Courier> _couriers,
      int whLimit,
      long delayLim,
      long shiftLen) {
    cooks = _cooks;
    couriers = _couriers;
    warehouse = new ArrayBlockingQueue<>(whLimit, true);
    pendingOrders = new LinkedBlockingQueue<>();
    delayLimit = delayLim;
    shiftLength = shiftLen;
    log = new Log();
  }

  public void run() {
    setShiftEnd(shiftLength);
    for (Cook c : cooks) {
      c.setWorkplace(this);
      c.start();
    }
    for (Courier cr : couriers) {
      cr.setWorkplace(this);
      cr.start();
    }
    for (Cook ck : cooks) {
      try {
        ck.join();
      } catch (InterruptedException e) {
        log.logException(e);
      }
    }
    for (Courier ck : couriers) {
      try {
        ck.join();
      } catch (InterruptedException e) {
        log.logException(e);
      }
    }
    log.logStatistics();
  }

  public void addOrder(Order order) {
    try {
      pendingOrders.put(order);
    } catch (InterruptedException e) {
      log.logException(e);
    }
  }

  public long getDateDiff(Date date1, Date date2, TimeUnit timeUnit) {
    long diffInMillis = date2.getTime() - date1.getTime();
    return timeUnit.convert(diffInMillis, TimeUnit.MILLISECONDS);
  }

  public long timeUntilShiftEnd() {
    Date now = new Date();
    return getDateDiff(now, shiftEnd, TimeUnit.MILLISECONDS);
  }

  public Date getShiftEnd() {
    return shiftEnd;
  }

  public long getDelayLimit() {
    return delayLimit;
  }

  public static void main(String[] args) {
    File flPizza = new File("src/main/resources/configPizzeria.json");
    File flClients = new File("src/main/resources/configClients.json");
    try {
      Pizzeria pz = Config.parse(new FileReader(flPizza));
      Clients cl = new Clients(pz, new FileReader(flClients));
      cl.start();
      pz.run();
    } catch (IOException e) {
      System.err.println(e.toString());
    }
  }
}
