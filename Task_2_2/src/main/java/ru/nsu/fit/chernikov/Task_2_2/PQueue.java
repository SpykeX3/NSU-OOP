/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.nsu.fit.chernikov.Task_2_2;

import java.util.EmptyStackException;
import java.util.Iterator;

public class PQueue<K extends Comparable<K>, T> implements Iterable<T> {
  private class PList {
    private K priority;
    private T value;
    private PList next, prev;

    public PList() {
      next = this;
      prev = this;
    }

    public PList(K pr, T val) {
      priority = pr;
      value = val;
      next = this;
      prev = this;
    }

    public T getValue() {
      return value;
    }

    public PList insert(K pr, T val) {
      PList seeker = this.next;
      PList node = new PList(pr, val);
      while (seeker != this && seeker.priority.compareTo(node.priority) < 0) {
        seeker = seeker.next;
      }

      PList prv = seeker.prev;
      prv.next = node;
      seeker.prev = node;
      node.next = seeker;
      node.prev = prv;

      return node;
    }

    public T pop() {
      if (prev == this) {
        throw new EmptyStackException();
      }
      T val = prev.getValue();
      prev.prev.next = this;
      this.prev = prev.prev;
      return val;
    }
  }

  private class PQIterator implements Iterator<T> {
    PList current;

    public PQIterator() {
      current = head.prev;
    }

    @Override
    public boolean hasNext() {
      return current == head;
    }

    @Override
    public T next() {
      T res = current.value;
      current = current.prev;
      return res;
    }
  }

  private PList head;
  private int count;

  public PQueue() {
    head = new PList();
    count = 0;
  }

  public void insert(K key, T value) {
    head.insert(key, value);
    count++;
  }

  public T extrack_minimum() {
    if (count == 0) {
      throw new EmptyStackException();
    }
    T val = head.pop();
    count--;
    return val;
  }

  public int getCount() {
    return count;
  }

  @Override
  public Iterator<T> iterator() {
    return new PQIterator();
  }
}
