/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.nsu.fit.chernikov.Task_2_1;

import org.junit.Test;

import java.util.EmptyStackException;
import java.util.Iterator;

import static org.junit.Assert.*;

public class StackTest {
  @Test
  public void testBasicPushPop() {
    Stack<Integer> stack = new Stack<Integer>(32);
    stack.push(0);
    int t = stack.pop();
    assertEquals(0, t);
  }

  @Test
  public void testMultiplePushPop() {
    Stack<Integer> stack = new Stack<Integer>(32);
    stack.push(0);
    stack.push(1);
    stack.push(2);
    stack.push(3);
    int t = stack.pop();
    assertEquals(3, t);
    t = stack.pop();
    assertEquals(2, t);
    t = stack.pop();
    assertEquals(1, t);
    stack.push(100500);
    t = stack.pop();
    assertEquals(100500, t);
  }

  @Test
  public void testDefaultConstructor() {
    Stack<Integer> stack = new Stack<Integer>();
    stack.push(0);
    int t = stack.pop();
    assertEquals(0, t);
    stack.push(0);
    stack.push(1);
    stack.push(2);
    stack.push(3);
    t = stack.pop();
    assertEquals(3, t);
    t = stack.pop();
    assertEquals(2, t);
    t = stack.pop();
    assertEquals(1, t);
    stack.push(100500);
    t = stack.pop();
    assertEquals(100500, t);
  }

  @Test
  public void testGeneric() {
    Stack<Integer> stackI = new Stack<Integer>(32);
    Stack<Double> stackD = new Stack<Double>(32);
    Stack<String> stackS = new Stack<String>(32);
    stackI.push(0);
    int i = stackI.pop();
    assertEquals(0, i);
    stackD.push(3.14);
    Double d = stackD.pop();
    assertEquals(3.14, d, 0.000001);
    stackS.push("Hello world!");
    String s = stackS.pop();
    assertEquals("Hello world!", s);
  }

  @Test
  public void testIsEmpty() {
    Stack<Integer> stack = new Stack<Integer>(32);
    assertTrue(stack.isEmpty());
    stack.push(0);
    assertFalse(stack.isEmpty());
    stack.pop();
    assertTrue(stack.isEmpty());
    stack.push(0);
    stack.push(1);
    assertFalse(stack.isEmpty());
    stack.pop();
    stack.pop();
    assertTrue(stack.isEmpty());
  }

  @Test
  public void testPeek() {
    Stack<Integer> stack = new Stack<>();
    stack.push(0);
    int t = stack.peek();
    assertEquals(0, t);
    assertFalse(stack.isEmpty());
    t = stack.peek();
    assertEquals(0, t);
    assertFalse(stack.isEmpty());
    stack.push(1);
    t = stack.peek();
    assertEquals(1, t);
    assertFalse(stack.isEmpty());
  }

  @Test(expected = EmptyStackException.class)
  public void testPopThrows() {
    Stack<Integer> stack = new Stack<>();
    stack.pop();
  }

  @Test(expected = EmptyStackException.class)
  public void testPeekThrows() {
    Stack<Integer> stack = new Stack<>();
    stack.peek();
  }

  @Test
  public void testExpansion() {
    Stack<Integer> stack = new Stack<>(0);
    for (int i = 0; i < 256; i++) {
      stack.push(i);
    }
    for (int i = 255; i >= 0; i--) {
      assertFalse(stack.isEmpty());
      assertEquals(i, (int) stack.pop());
    }
    assertTrue(stack.isEmpty());
  }

  @Test
  public void testIterator() {
    Stack<Integer> stack = new Stack<>(256);
    for (int i = 0; i < 256; i++) {
      stack.push(i);
    }
    int i = 255;
    for (int t : stack) {
      assertFalse(stack.isEmpty());
      assertEquals(i, t);
      i--;
    }
    assertFalse(stack.isEmpty());
    assertEquals(255, (int) stack.peek());
  }

  @Test
  public void testDestructiveIterator() {
    Stack<Integer> stack = new Stack<>(256);
    for (int i = 0; i < 256; i++) {
      stack.push(i);
    }
    int i = 255;
    Iterator<Integer> iter = stack.iteratorD();
    while (iter.hasNext()) {
      int t = iter.next();
      assertEquals(i, t);
      i--;
    }
    assertTrue(stack.isEmpty());
  }
}
