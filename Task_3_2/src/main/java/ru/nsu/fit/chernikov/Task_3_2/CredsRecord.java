/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.nsu.fit.chernikov.Task_3_2;

import java.util.ArrayList;
import java.util.AbstractMap;
/**
 * Record of all student's credits. Can store credits and marks that can be final or intermediate.
 */
public class CredsRecord {
  private Credit finalProject;
  private ArrayList<ArrayList<AbstractMap.SimpleEntry<String, Credit>>> records;
  private int marksInDiploma;
  private int currentFinalMarks;

  /**
   * Record of credit constructor. Has constant number of semesters.
   *
   * @param semesters number of semesters in programme.
   * @param _marksInDiploma number of marks that wil be in diploma. Can be changed later.
   * @throws IllegalArgumentException if any argument is negative.
   */
  public CredsRecord(int semesters, int _marksInDiploma) {
    if (semesters < 0) {
      throw new IllegalArgumentException("negative semesters count");
    }
    if (_marksInDiploma < 0) {
      throw new IllegalArgumentException("negative marks in diploma count");
    }
    marksInDiploma = _marksInDiploma;
    records = new ArrayList<>();
    for (int i = 0; i < semesters; i++) {
      records.add(new ArrayList<>());
    }
    currentFinalMarks = 0;
  }

  /**
   * Add a credit in specific semester. Can be final or intermediate.
   *
   * @param title is title of discipline to be stored.
   * @param mark numerical evaluation of semester results.
   * @param isFinal if mark should be included in diploma.
   * @param semester number of semester of this mark, counting from 1.
   * @throws IllegalStateException if trying to add mark to already full diploma.
   */
  public void addCredit(String title, int mark, boolean isFinal, int semester) {
    if (isFinal) {
      if (currentFinalMarks == marksInDiploma) {
        throw new IllegalStateException("all marks in diploma are already set");
      }
      currentFinalMarks++;
    }
    records.get(semester - 1).add(new AbstractMap.SimpleEntry<>(title, new Credit(mark, isFinal)));
  }

  /**
   * Add a credit in specific semester. Can be final or intermediate.
   *
   * @param title is title of discipline to be stored.
   * @param passed if student has successfully passed course.
   * @param isFinal if mark should be included in diploma.
   * @param semester number of semester of this mark, counting from 1.
   */
  public void addCredit(String title, boolean passed, boolean isFinal, int semester) {
    records
        .get(semester - 1)
        .add(new AbstractMap.SimpleEntry<>(title, new Credit(passed, isFinal)));
  }

  /**
   * Set mark for final year project.
   *
   * @param mark to be set.
   */
  public void setFinalProject(int mark) {
    finalProject = new Credit(mark, true);
  }

  /**
   * Set number of marks in diploma.
   *
   * @param _count to be set.
   * @throws IllegalArgumentException if count is less then current number of marks in diploma.
   */
  public void setTotalMarksCount(int _count) {
    if (_count < currentFinalMarks) {
      throw new IllegalArgumentException("diploma already has more marks");
    }
    marksInDiploma = _count;
  }

  /**
   * Get expected number of marks in diploma.
   *
   * @return number of marks in diploma.
   */
  public int getTotalMarksCount() {
    return marksInDiploma;
  }

  /**
   * Get average of all marks in record.
   *
   * @return average mark.
   */
  public double getAverage() {
    Long stats =
        records.stream()
            .map(
                sm ->
                    sm.stream()
                        .filter(p -> p.getValue().isMark())
                        .map(p -> (long) p.getValue().getMark())
                        .reduce(0L, Long::sum))
            .reduce(0L, Long::sum);
    Long count =
        records.stream()
            .map(sm -> sm.stream().filter(p -> p.getValue().isMark()).count())
            .reduce(0L, Long::sum);
    return stats.doubleValue() / count;
  }

  /**
   * Determine if student would have award in specific semester.
   *
   * @param semester number of semester, counting from 1.
   * @return if student would have award that semester.
   */
  public boolean hasAward(int semester) {
    return records.get(semester - 1).stream()
        .allMatch(
            p ->
                p.getValue().getMark() > 3
                    || (p.getValue().getMark() == 1 && !p.getValue().isMark()));
  }

  /**
   * Determine if student still can get a special diploma. Explanation: all marks should be good or
   * better,
   *
   * @return if special diploma is possible.
   */
  public boolean canHaveSpecialDiploma() {
    boolean goodMarks =
        records.stream()
            .allMatch(
                (sm) ->
                    sm.stream()
                        .allMatch(
                            p ->
                                p.getValue().getMark() > 3
                                    || (p.getValue().getMark() == 1 && !p.getValue().isMark())));
    if (!goodMarks) return false;
    Long stats =
        records.stream()
            .map(
                sm ->
                    sm.stream()
                        .filter(p -> p.getValue().isMark() && p.getValue().isFinal())
                        .map(p -> (long) p.getValue().getMark())
                        .reduce(0L, Long::sum))
            .reduce(0L, Long::sum);
    double bestAvg =
        (stats.doubleValue() + 5 * (marksInDiploma - currentFinalMarks)) / marksInDiploma;
    if (finalProject != null && finalProject.getMark() != 5) {
      return false;
    }
    return bestAvg >= 4.75;
  }
}
