/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.nsu.fit.chernikov.Task_3_2;

import org.junit.Test;
import static org.junit.Assert.*;

public class CredsRecordTest {
  @Test
  public void testMyCredits() {
    CredsRecord cr = new CredsRecord(8, 50);
    cr.addCredit("Math anal", 5, false, 1);
    cr.addCredit("Discr math", 5, false, 1);
    cr.addCredit("History", 4, true, 1);
    cr.addCredit("Digital platforms", true, false, 1);
    cr.addCredit("Imp prog", 4, false, 1);
    cr.addCredit("Decl prog", 5, false, 1);
    cr.addCredit("Lang culture", 5, true, 1);
    cr.addCredit("English", true, false, 1);
    cr.addCredit("PE1", true, false, 1);
    cr.addCredit("PE2", true, false, 1);

    cr.addCredit("Discr math", 5, true, 2);
    cr.addCredit("Math anal", 5, true, 2);
    cr.addCredit("Imp prog", 5, true, 2);
    cr.addCredit("Digital platforms", 5, true, 2);
    cr.addCredit("Decl prog", 4, true, 2);
    cr.addCredit("Eng", 4, true, 2);
    cr.addCredit("PE2", true, false, 2);
    cr.addCredit("PE1", true, false, 2);

    assertTrue(cr.canHaveSpecialDiploma());
    assertEquals(4.666, cr.getAverage(), 0.01);
    assertTrue(cr.hasAward(1));
    assertTrue(cr.hasAward(2));
  }

  @Test
  public void testAvg1() {
    CredsRecord cr = new CredsRecord(4, 100);
    for (int i = 1; i < 5; i++) {
      for (int j = 0; j < 20; j++) {
        cr.addCredit("Placeholder5", 5, false, i);
      }
      for (int j = 0; j < 5; j++) {
        cr.addCredit("Placeholder4", 4, false, i);
      }
    }
    assertEquals(4.8, cr.getAverage(), 0.01);
  }

  @Test
  public void testAvg2() {
    CredsRecord cr = new CredsRecord(4, 100);
    for (int i = 1; i < 5; i++) {
      for (int j = 0; j < 20; j++) {
        cr.addCredit("Placeholder3", 3, false, i);
      }
      for (int j = 0; j < 5; j++) {
        cr.addCredit("PlaceholderPassed", true, false, i);
      }
    }
    assertEquals(3, cr.getAverage(), 0.01);
  }

  @Test
  public void testAward() {
    CredsRecord crBad = new CredsRecord(1, 10);
    CredsRecord crGood = new CredsRecord(1, 10);
    for (int i = 0; i < 9; i++) {
      crGood.addCredit("Placeholder", 5, true, 1);
      crBad.addCredit("Placeholder", 5, true, 1);
    }
    crGood.addCredit("Placeholder", 5, true, 1);
    crBad.addCredit("Placeholder", 3, true, 1);
    assertTrue(crGood.hasAward(1));
    assertFalse(crBad.hasAward(1));
  }

  @Test
  public void testSDiploma() {
    CredsRecord crHasSatisf = new CredsRecord(1, 10);
    CredsRecord crGood = new CredsRecord(1, 10);
    CredsRecord crLowAvg = new CredsRecord(1, 10);
    CredsRecord crBadFinal = new CredsRecord(1, 10);

    for (int i = 0; i < 9; i++) {
      crGood.addCredit("Placeholder", 5, true, 1);
      crHasSatisf.addCredit("Placeholder", 5, true, 1);
      crBadFinal.addCredit("Placeholder", 5, true, 1);
      crLowAvg.addCredit("Placeholder", 4, true, 1);
    }

    assertTrue(crHasSatisf.canHaveSpecialDiploma());
    assertTrue(crGood.canHaveSpecialDiploma());

    crGood.addCredit("Placeholder", 5, true, 1);
    crHasSatisf.addCredit("Placeholder", 3, true, 1);
    crBadFinal.addCredit("Placeholder", 5, true, 1);
    crLowAvg.addCredit("Placeholder", 5, true, 1);

    assertTrue(crGood.canHaveSpecialDiploma());
    assertFalse(crHasSatisf.canHaveSpecialDiploma());
    crGood.setFinalProject(5);
    crHasSatisf.setFinalProject(5);
    crLowAvg.setFinalProject(5);
    crBadFinal.setFinalProject(4);

    assertTrue(crGood.canHaveSpecialDiploma());
    assertFalse(crHasSatisf.canHaveSpecialDiploma());
    assertFalse(crLowAvg.canHaveSpecialDiploma());
    assertFalse(crBadFinal.canHaveSpecialDiploma());
  }

  @Test(expected = IllegalStateException.class)
  public void testTooManyFinalMarksException() {
    CredsRecord cr = new CredsRecord(1, 10);
    try {
      for (int i = 0; i < 100; i++) {
        cr.addCredit("Placeholder", true, true, 1);
      }
      for (int i = 0; i < 10; i++) {
        cr.addCredit("AreFinal", 5, true, 1);
      }
      for (int i = 0; i < 10; i++) {
        cr.addCredit("Not final", 5, false, 1);
      }
    } catch (Exception e) {
      System.err.println(e);
      fail();
    }
    cr.addCredit("Additional mark", 5, true, 1);
  }

  @Test(expected = IndexOutOfBoundsException.class)
  public void outOfBoundsAdd() {
    CredsRecord cr = new CredsRecord(8, 100);
    cr.addCredit("Wrong", 5, true, 9);
  }

  @Test(expected = IndexOutOfBoundsException.class)
  public void outOfBoundsAward() {
    CredsRecord cr = new CredsRecord(1, 100);
    try {
      for (int i = 0; i < 10; i++) {
        cr.addCredit("Not final", 5, false, 1);
      }
      cr.hasAward(1);
    } catch (Exception e) {
      System.err.println(e);
      fail();
    }
    cr.hasAward(2);
  }
}
